import { ethers } from "hardhat";

/**
 * Verify if the NaughtCoinExploit was successful in transferring all tokens
 * 
 * Usage: 
 * EXPLOIT_ADDRESS=0xYourExploitAddress TARGET_ADDRESS=0xTargetAddress npx hardhat run scripts/level-15-naught-coin/verify-exploit-success.ts --network sepolia
 */
async function main() {
  // For the exploit address, we require it to be provided
  if (!process.env.EXPLOIT_ADDRESS) {
    console.error("Error: No NaughtCoinExploit contract address provided.");
    console.error("Please provide the address of your deployed NaughtCoinExploit contract using the EXPLOIT_ADDRESS environment variable.");
    console.error("Example: EXPLOIT_ADDRESS=0xYourExploitAddress TARGET_ADDRESS=0xTargetAddress npx hardhat run scripts/level-15-naught-coin/verify-exploit-success.ts --network sepolia");
    return;
  }
  const exploitAddress = process.env.EXPLOIT_ADDRESS;

  // Get target contract address from environment variable or use the one from the exploit contract
  let targetAddress: string;
  if (process.env.TARGET_ADDRESS) {
    targetAddress = process.env.TARGET_ADDRESS;
  } else {
    // We'll get it from the exploit contract
    targetAddress = "";
  }
  
  console.log(`Using NaughtCoinExploit contract address: ${exploitAddress}`);
  
  // Get the contract factory for NaughtCoinExploit and connect to it
  const NaughtCoinExploit = await ethers.getContractFactory("NaughtCoinExploit");
  const naughtCoinExploit = NaughtCoinExploit.attach(exploitAddress);
  
  console.log(`Connected to NaughtCoinExploit contract at: ${exploitAddress}`);
  
  // If TARGET_ADDRESS wasn't provided, get it from the exploit contract
  if (!targetAddress) {
    targetAddress = await naughtCoinExploit.getFunction("naughtCoinAddress")();
  }
  console.log(`Target NaughtCoin contract address: ${targetAddress}`);
  
  // Connect to the NaughtCoin contract
  const NaughtCoin = await ethers.getContractFactory("NaughtCoin");
  const naughtCoin = NaughtCoin.attach(targetAddress);
  
  // Get the player address and check balance
  const player = await naughtCoin.getFunction("player")();
  const playerBalance = await naughtCoin.getFunction("balanceOf")(player);
  const owner = await naughtCoinExploit.getFunction("owner")();
  const ownerBalance = await naughtCoin.getFunction("balanceOf")(owner);
  
  console.log(`Player address: ${player}`);
  console.log(`Player balance: ${ethers.formatEther(playerBalance)} tokens`);
  console.log(`Owner of exploit contract: ${owner}`);
  console.log(`Owner balance: ${ethers.formatEther(ownerBalance)} tokens`);
  
  // Check if the exploit was successful
  const success = await naughtCoinExploit.getFunction("checkSuccess")();
  
  if (success) {
    console.log("✅ Success! The exploit was successful. The player's balance is now zero.");
    console.log("The timelock has been bypassed successfully.");
  } else {
    console.log("❌ The exploit failed. The player still has tokens in their account.");
    console.log("The timelock remains effective.");
  }
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
