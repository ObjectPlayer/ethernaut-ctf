import { ethers } from "hardhat";

/**
 * Verify if the GatekeeperTwoExploit was successful in becoming the entrant
 * 
 * Usage: 
 * EXPLOIT_ADDRESS=0xYourExploitAddress TARGET_ADDRESS=0xTargetAddress npx hardhat run scripts/level-14-gatekeeper-2/verify-exploit-success.ts --network sepolia
 */
async function main() {
  // For the exploit address, we require it to be provided
  if (!process.env.EXPLOIT_ADDRESS) {
    console.error("Error: No GatekeeperTwoExploit contract address provided.");
    console.error("Please provide the address of your deployed GatekeeperTwoExploit contract using the EXPLOIT_ADDRESS environment variable.");
    console.error("Example: EXPLOIT_ADDRESS=0xYourExploitAddress TARGET_ADDRESS=0xTargetAddress npx hardhat run scripts/level-14-gatekeeper-2/verify-exploit-success.ts --network sepolia");
    return;
  }
  const exploitAddress = process.env.EXPLOIT_ADDRESS;

  // Get target contract address from environment variable or use the one from the exploit contract
  let targetAddress: string;
  if (process.env.TARGET_ADDRESS) {
    targetAddress = process.env.TARGET_ADDRESS;
  } else {
    // We'll get it from the exploit contract
    targetAddress = "";
  }
  
  console.log(`Using GatekeeperTwoExploit contract address: ${exploitAddress}`);
  
  // Get the contract factory for GatekeeperTwoExploit and connect to it
  const GatekeeperTwoExploit = await ethers.getContractFactory("GatekeeperTwoExploit");
  const gatekeeperTwoExploit = GatekeeperTwoExploit.attach(exploitAddress);
  
  console.log(`Connected to GatekeeperTwoExploit contract at: ${exploitAddress}`);
  
  // If TARGET_ADDRESS wasn't provided, get it from the exploit contract
  if (!targetAddress) {
    targetAddress = await gatekeeperTwoExploit.getFunction("gatekeeperAddress")();
  }
  console.log(`Target GatekeeperTwo contract address: ${targetAddress}`);
  
  // Connect to the GatekeeperTwo contract
  const GatekeeperTwo = await ethers.getContractFactory("GatekeeperTwo");
  const gatekeeperTwo = GatekeeperTwo.attach(targetAddress);
  
  // Get the entrant from the GatekeeperTwo contract
  const entrant = await gatekeeperTwo.getFunction("entrant")();
  const owner = await gatekeeperTwoExploit.getFunction("owner")();
  
  console.log(`Owner of exploit contract: ${owner}`);
  console.log(`Current entrant in GatekeeperTwo: ${entrant}`);
  
  // Check if the entrant is the exploit contract's owner (tx.origin when the exploit was deployed)
  if (entrant === owner) {
    console.log("✅ Success! The exploit was successful. We are the entrant of the GatekeeperTwo contract.");
  } else {
    console.log("❌ The exploit failed. We are NOT the entrant of the GatekeeperTwo contract.");
  }
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
