import { ethers } from "hardhat";

/**
 * Deploy the GatekeeperTwoExploit contract for Level 14 of Ethernaut
 * Note: This contract will automatically attempt to become the entrant upon deployment
 * 
 * Usage:
 * TARGET_ADDRESS=0xYourGatekeeperTwoAddress npx hardhat run scripts/level-14-gatekeeper-2/deploy-gatekeeper-two-exploit.ts --network sepolia
 */
async function main() {
  // Get target contract address from environment variable
  if (!process.env.TARGET_ADDRESS) {
    console.error("Error: No GatekeeperTwo contract address provided.");
    console.error("Please provide the address of the GatekeeperTwo contract using the TARGET_ADDRESS environment variable.");
    console.error("Example: TARGET_ADDRESS=0xYourGatekeeperTwoAddress npx hardhat run scripts/level-14-gatekeeper-2/deploy-gatekeeper-two-exploit.ts --network sepolia");
    return;
  }
  
  const targetAddress = process.env.TARGET_ADDRESS;
  
  console.log(`Deploying GatekeeperTwoExploit contract targeting GatekeeperTwo at: ${targetAddress}`);
  
  // Get the contract factory
  const GatekeeperTwoExploit = await ethers.getContractFactory("GatekeeperTwoExploit");
  
  // Deploy the contract which will automatically attempt to become the entrant
  const gatekeeperTwoExploit = await GatekeeperTwoExploit.deploy(targetAddress);
  
  // Wait for the transaction to be mined
  await gatekeeperTwoExploit.deploymentTransaction()?.wait();
  
  console.log(`GatekeeperTwoExploit deployed to: ${gatekeeperTwoExploit.target}`);
  
  // Check if we successfully became the entrant
  const success = await gatekeeperTwoExploit.getFunction("checkSuccess")();
  
  if (success) {
    console.log("✅ Success! We successfully became the entrant of the GatekeeperTwo contract.");
  } else {
    console.log("❌ Failed to become the entrant of the GatekeeperTwo contract.");
    
    // Log some debugging information
    const owner = await gatekeeperTwoExploit.getFunction("owner")();
    console.log(`Owner of exploit contract: ${owner}`);
    console.log(`This could be due to an issue with the key generation or other factors.`);
  }
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
